@page "/admin/to-do-item-edit"
@page "/admin/to-do-item-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IToDoItemAdminService ToDoItemAdminService

@inject IToDoListAdminService ToDoListAdminService
@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminService ToDoListAdminService *@

  @if (Id.Equals(Guid.Empty))
  {
    <PageTitle>To Do Item Creation</PageTitle>
  }
  else
  {
    <PageTitle>To Do Item Modification</PageTitle>
  }

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>To Do Item Creation</h1>
  }
  else
  {
    <h1>To Do Item Modification</h1>
  }
  <article>
    <EditForm class="container" Model="toDoItemAdminEditModel" OnSubmit="HandleSubmit">

      <div class="row">
        <div class="col">
          <label>
            IsCompleted:
            <InputCheckbox @bind-Value="toDoItemAdminEditModel.IsCompleted" data-testid="toDoItemAdminEditIsCompleted" />
          </label>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <label>
            Ordering:
            <InputNumber @bind-Value="toDoItemAdminEditModel.Ordering" data-testid="toDoItemAdminEditOrdering" />
          </label>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <label>
            List Items:
            <select @onchange="ListItemsOnChange">
              <option>Select list items...</option>
                @if (listItemsList != null)
                {
                  @foreach (var listItems in listItemsList)
                  {
                    if (toDoItemAdminEditModel.ListItems != null && toDoItemAdminEditModel.ListItems.Id.Equals(listItems.Id))
                    {
                      <option value="@listItems.Id" selected>@listItems?.Title</option>
                    }
                    else
                    {
                      <option value="@listItems.Id">@listItems?.Title</option>
                    }
                  }
                }
              </select>
          </label>
        </div>
      </div>
      @* EditRowCodePlaceholder *@

      <div class="row">
        <div class="col">
          @if (!Id.Equals(Guid.Empty))
          {
            <button @onclick="Remove" type="button" class="btn btn-danger">Remove</button>
          }
        </div>
        <div class="col">
          <a href="/admin/to-do-item-list">Cancel</a>
          @if (Id.Equals(Guid.Empty))
          {
            <button type="submit" class="btn btn-primary">Create</button>
          }
          else
          {
            <button type="submit" class="btn btn-primary">Modify</button>
          }
         </div>
      </div>
    </EditForm>
  </article>
</section>

@code {
  [Parameter]
  public Guid Id { get; set; }
  ToDoItemAdminEditModel toDoItemAdminEditModel { get; set; } = new ToDoItemAdminEditModel();

  List<ToDoList> listItemsList { get; set; } = [];
    @* ListDeclarationCodePlaceholder *@

  protected override async Task OnInitializedAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    await base.OnInitializedAsync();

    var listItemsListResult = await ToDoListAdminService.GetAllAsync(userName);
        if (listItemsListResult != null)
        {
            listItemsList = listItemsListResult;
        }
        @* OnInitializedCodePlaceholder *@
  }

  protected override async Task OnParametersSetAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    var databaseToDoItemAdminDto = await ToDoItemAdminService.GetByIdAsync(userName, Id);

    if (databaseToDoItemAdminDto == null)
    {
      toDoItemAdminEditModel = new ToDoItemAdminEditModel();
    }
    else
    {
      toDoItemAdminEditModel = ToDoItemAdminEditModel.FromToDoItemAdminDto(databaseToDoItemAdminDto);
    }
  }

  async Task HandleSubmit()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    @* RequiredPropertyPlaceholder *@

    @* if (string.IsNullOrWhiteSpace(toDoItemAdminEditModel.Name))
    {
      return;
    } *@

    var toDoItemAdminDto = ToDoItemAdminEditModel.ToToDoItemAdminDto(toDoItemAdminEditModel);
    toDoItemAdminDto.ApplicationUserName = userName;

    if (Id.Equals(Guid.Empty))
    {
      var newToDoItemAdminDto = await ToDoItemAdminService.AddAsync(toDoItemAdminDto);

      if (newToDoItemAdminDto == null)
      {
        return;
      }

      NavigationManager.NavigateTo($"/admin/to-do-item-edit/{newToDoItemAdminDto.Id}");
    }
    else
    {
      await ToDoItemAdminService.EditAsync(toDoItemAdminDto);
    }
  }

  async Task Remove()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name!;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    await ToDoItemAdminService.DeleteAsync(userName, Id);
    NavigationManager.NavigateTo($"/admin/to-do-item-list");
  }

  void ListItemsOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        toDoItemAdminEditModel.ListItems = listItemsList?.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    }

    @* OnChangeCodePlaceholder *@
}
