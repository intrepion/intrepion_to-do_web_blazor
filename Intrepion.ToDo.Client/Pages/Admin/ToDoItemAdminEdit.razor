@page "/admin/UrlNamePlaceholder-edit/{id:guid?}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IToDoItemAdminRepository ToDoItemAdminRepository
@attribute [Authorize(Roles = "Admin")]

@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminRepository ToDoListAdminRepository *@

  @if (Id.Equals(Guid.Empty))
  {
    <PageTitle>HumanNamePlaceholder Creation</PageTitle>
  }
  else
  {
    <PageTitle>HumanNamePlaceholder Modification</PageTitle>
  }

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>HumanNamePlaceholder Creation</h1>
  }
  else
  {
    <h1>HumanNamePlaceholder Modification</h1>
  }
  <article>
    <EditForm class="container" Model="toDoItemAdminEditVm" OnValidSubmit="HandleSubmit">
      <DataAnnotationsValidator />
      <ValidationSummary class="text-danger" />

      @* EditRowCodePlaceholder *@

      <div class="row">
        <div class="col">
          @if (!Id.Equals(Guid.Empty))
          {
            <button @onclick="Remove" type="button" class="btn btn-danger">Remove</button>
          }
        </div>
        <div class="col">
          <a href="/admin/UrlNamePlaceholder-list">Cancel</a>
          @if (Id.Equals(Guid.Empty))
          {
            <button type="submit" class="btn btn-primary">Create</button>
          }
          else
          {
            <button type="submit" class="btn btn-primary">Modify</button>
          }
         </div>
      </div>
    </EditForm>
  </article>
</section>

@code {
  [Parameter]
  public Guid Id { get; set; }
  ToDoItemAdminEditVm toDoItemAdminEditVm { get; set; } = new ToDoItemAdminEditVm();

  @* ListDeclarationCodePlaceholder *@

  protected override async Task OnInitializedAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    await base.OnInitializedAsync();

    @* OnInitializedCodePlaceholder *@
  }

  protected override async Task OnParametersSetAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    var databaseToDoItemAdminDto = await ToDoItemAdminRepository.GetByIdAsync(userName, Id);

    if (databaseToDoItemAdminDto == null)
    {
      toDoItemAdminEditVm = new ToDoItemAdminEditVm();
    }
    else
    {
      toDoItemAdminEditVm = ToDoItemAdminEditVm.FromToDoItemAdminDto(databaseToDoItemAdminDto);
    }
  }

  async Task HandleSubmit()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    @* RequiredPropertyPlaceholder *@

    var toDoItemAdminDto = ToDoItemAdminEditVm.ToToDoItemAdminDto(toDoItemAdminEditVm);
    toDoItemAdminDto.ApplicationUserName = userName;

    if (Id.Equals(Guid.Empty))
    {
      var newToDoItemAdminDto = await ToDoItemAdminRepository.AddAsync(toDoItemAdminDto);

      if (newToDoItemAdminDto == null)
      {
        return;
      }

      NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-edit/{newToDoItemAdminDto.Id}");
    }
    else
    {
      await ToDoItemAdminRepository.EditAsync(toDoItemAdminDto);
    }
  }

  async Task Remove()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name!;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    await ToDoItemAdminRepository.DeleteAsync(userName, Id);
    NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-list");
  }

  @* OnChangeCodePlaceholder *@
}
