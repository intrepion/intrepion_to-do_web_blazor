@page "/admin/application-role-edit"
@page "/admin/application-role-edit/{id:guid}"
@inject IApplicationRoleAdminService ApplicationRoleAdminService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>Create Application Role</h1>
    }
    else
    {
        <h1>Edit Application Role</h1>
    }
    <article>
        <EditForm class="container" Model="applicationRoleAdminEditModel" OnSubmit="HandleSubmit">
            <div class="row">
                <div class="col">
                    <label>
                        Name:
                        <InputText @bind-Value="applicationRoleAdminEditModel.Name">@applicationRoleAdminEditModel.Name</InputText>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/application-role-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    ApplicationRoleAdminEditModel applicationRoleAdminEditModel { get; set; } = new ApplicationRoleAdminEditModel();

    protected override async Task OnParametersSetAsync()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var databaseApplicationRoleAdminDataTransferObject = await ApplicationRoleAdminService.GetByIdAsync(Id);

        if (databaseApplicationRoleAdminDataTransferObject == null)
        {
            applicationRoleAdminEditModel = new ApplicationRoleAdminEditModel();
        }
        else
        {
            applicationRoleAdminEditModel = ApplicationRoleAdminEditModel.FromApplicationRoleAdminDataTransferObject(databaseApplicationRoleAdminDataTransferObject);
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (applicationRoleAdminEditModel == null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(applicationRoleAdminEditModel.Name))
        {
            return;
        }

        var applicationRoleAdminDataTransferObject = ApplicationRoleAdminEditModel.ToApplicationRoleAdminDataTransferObject(applicationRoleAdminEditModel);

        if (Id.Equals(Guid.Empty))
        {
            var databaseApplicationRole = await ApplicationRoleAdminService.AddAsync(userName, applicationRoleAdminDataTransferObject);

            if (databaseApplicationRole == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/application-role-edit/{databaseApplicationRole.Id}");
        }
        else
        {
            await ApplicationRoleAdminService.EditAsync(userName, Id, applicationRoleAdminDataTransferObject);
        }
    }

    async Task Delete()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        await ApplicationRoleAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/application-role-list");
    }
}
