@page "/admin/UrlNamePlaceholder-edit"
@page "/admin/UrlNamePlaceholder-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IToDoListAdminService ToDoListAdminService

@* InjectionCodePlaceholder *@

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>Create HumanNamePlaceholder</h1>
    }
    else
    {
        <h1>Edit HumanNamePlaceholder</h1>
    }
    <article>
        <EditForm class="container" Model="toDoListAdminEditModel" OnSubmit="HandleSubmit">

            @* EditRowCodePlaceholder *@

            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/UrlNamePlaceholder-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    ToDoListAdminEditModel toDoListAdminEditModel { get; set; } = new ToDoListAdminEditModel();

    @* ListDeclarationCodePlaceholder *@

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        @* OnInitializedCodePlaceholder *@
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var databaseToDoListAdminDataTransferObject = await ToDoListAdminService.GetByIdAsync(Id);

        if (databaseToDoListAdminDataTransferObject == null)
        {
            toDoListAdminEditModel = new ToDoListAdminEditModel();
        }
        else
        {
            toDoListAdminEditModel = ToDoListAdminEditModel.FromToDoListAdminDataTransferObject(databaseToDoListAdminDataTransferObject);
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        @* if (string.IsNullOrWhiteSpace(toDoListAdminEditModel.Name))
        {
            return;
        } *@

        var toDoListAdminDataTransferObject = ToDoListAdminEditModel.ToToDoListAdminDataTransferObject(toDoListAdminEditModel);

        if (Id.Equals(Guid.Empty))
        {
            var newToDoListAdminDataTransferObject = await ToDoListAdminService.AddAsync(userName, toDoListAdminDataTransferObject);

            if (newToDoListAdminDataTransferObject == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-edit/{newToDoListAdminDataTransferObject.Id}");
        }
        else
        {
            await ToDoListAdminService.EditAsync(userName, Id, toDoListAdminDataTransferObject);
        }
    }

    async Task Delete()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        await ToDoListAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-list");
    }

    @* OnChangeCodePlaceholder *@
}
