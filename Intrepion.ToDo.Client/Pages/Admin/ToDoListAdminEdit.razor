@page "/admin/UrlNamePlaceholder-edit"
@page "/admin/UrlNamePlaceholder-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IEntityNamePlaceholderAdminService EntityNamePlaceholderAdminService

@* InjectionCodePlaceholder *@

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>Create HumanNamePlaceholder</h1>
    }
    else
    {
        <h1>Edit HumanNamePlaceholder</h1>
    }
    <article>
        <EditForm class="container" Model="EntityLowercaseNamePlaceholderAdminEditModel" OnSubmit="HandleSubmit">

            @* EditRowCodePlaceholder *@

            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/UrlNamePlaceholder-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    EntityNamePlaceholderAdminEditModel EntityLowercaseNamePlaceholderAdminEditModel { get; set; } = new EntityNamePlaceholderAdminEditModel();

    @* ListDeclarationCodePlaceholder *@

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        @* OnInitializedCodePlaceholder *@
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var databaseEntityNamePlaceholderAdminDataTransferObject = await EntityNamePlaceholderAdminService.GetByIdAsync(Id);

        if (databaseEntityNamePlaceholderAdminDataTransferObject == null)
        {
            EntityLowercaseNamePlaceholderAdminEditModel = new EntityNamePlaceholderAdminEditModel();
        }
        else
        {
            EntityLowercaseNamePlaceholderAdminEditModel = EntityNamePlaceholderAdminEditModel.FromEntityNamePlaceholderAdminDataTransferObject(databaseEntityNamePlaceholderAdminDataTransferObject);
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        @* if (string.IsNullOrWhiteSpace(EntityLowercaseNamePlaceholderAdminEditModel.Name))
        {
            return;
        } *@

        var EntityLowercaseNamePlaceholderAdminDataTransferObject = EntityNamePlaceholderAdminEditModel.ToEntityNamePlaceholderAdminDataTransferObject(EntityLowercaseNamePlaceholderAdminEditModel);

        if (Id.Equals(Guid.Empty))
        {
            var newEntityNamePlaceholderAdminDataTransferObject = await EntityNamePlaceholderAdminService.AddAsync(userName, EntityLowercaseNamePlaceholderAdminDataTransferObject);

            if (newEntityNamePlaceholderAdminDataTransferObject == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-edit/{newEntityNamePlaceholderAdminDataTransferObject.Id}");
        }
        else
        {
            await EntityNamePlaceholderAdminService.EditAsync(userName, Id, EntityLowercaseNamePlaceholderAdminDataTransferObject);
        }
    }

    async Task Delete()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        await EntityNamePlaceholderAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-list");
    }

    @* OnChangeCodePlaceholder *@
}
