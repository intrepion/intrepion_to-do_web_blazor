@page "/admin/to-do-list-edit"
@page "/admin/to-do-list-edit/{id:guid}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IToDoListAdminService ToDoListAdminService
@* InjectionCodePlaceholder *@
@rendermode InteractiveAuto

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>To Do List Role</h1>
    }
    else
    {
        <h1>Edit To Do List</h1>
    }
    <article>
        <EditForm class="container" Model="EntityLowercaseNamePlaceholder" OnSubmit="HandleSubmit">
            @* EditRowCodePlaceholder *@
            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/to-do-list-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    ToDoList EntityLowercaseNamePlaceholder { get; set; } = new ToDoList();
    @* ListDeclarationCodePlaceholder *@

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        @* OnInitializedCodePlaceholder *@
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var result = await ToDoListAdminService.GetByIdAsync(Id);

        if (result == null)
        {
            EntityLowercaseNamePlaceholder = new ToDoList();
        }
        else
        {
            EntityLowercaseNamePlaceholder = result;
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (userName == null)
        {
            return;
        }

        if (EntityLowercaseNamePlaceholder == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            var dbToDoList = await ToDoListAdminService.AddAsync(userName, EntityLowercaseNamePlaceholder);

            if (dbToDoList == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/to-do-list-edit/{dbToDoList.Id}");
        }
        else
        {
            await ToDoListAdminService.EditAsync(userName, Id, EntityLowercaseNamePlaceholder);
        }
    }

    async Task Delete()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        await ToDoListAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/to-do-list-list");
    }

    @* OnChangeCodePlaceholder *@
}
