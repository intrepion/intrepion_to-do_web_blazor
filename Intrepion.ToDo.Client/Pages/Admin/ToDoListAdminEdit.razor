@page "/admin/UrlNamePlaceholder-edit"
@page "/admin/UrlNamePlaceholder-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IEntityNamePlaceholderAdminService EntityNamePlaceholderAdminService

@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminService ToDoListAdminService *@

  @if (Id.Equals(Guid.Empty))
  {
    <PageTitle>HumanNamePlaceholder Creation</PageTitle>
  }
  else
  {
    <PageTitle>HumanNamePlaceholder Modification</PageTitle>
  }

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>HumanNamePlaceholder Creation</h1>
  }
  else
  {
    <h1>HumanNamePlaceholder Modification</h1>
  }
  <article>
    <EditForm class="container" Model="toDoListAdminEditModel" OnSubmit="HandleSubmit">

      @* EditRowCodePlaceholder *@
      @* <div class="row">
                <div class="col">
                    <label>
                        To Do List:
                        <select @onchange="ToDoListOnChange">
                            <option>Select to Do List...</option>
                            @if (toDoListList != null)
                            {
                                @foreach (var toDoList in toDoListList)
                                {
                                    if (toDoListAdminEditModel.ToDoList != null && toDoListAdminEditModel.ToDoList.Id.Equals(toDoList.Id))
                                    {
                                        <option value="@toDoList.Id" selected>@toDoList.Title</option>
                                    }
                                    else
                                    {
                                        <option value="@toDoList.Id">@toDoList.Title</option>
                                    }
                                }
                            }
                        </select>
                    </label>
                </div>
            </div>
            <div class="row">
              <div class="col">
                <label>
                    Name:
                    <InputText @bind-Value="toDoListAdminEditModel.Name" data-testid="toDoListAdminEditName" />
                </label>
              </div>
            </div> *@

            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Remove" type="button" class="btn btn-danger">Remove</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/UrlNamePlaceholder-list">Cancel</a>
                    @if (Id.Equals(Guid.Empty))
                    {
                        <button type="submit" class="btn btn-primary">Create</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary">Modify</button>
                    }
               </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    EntityNamePlaceholderAdminEditModel toDoListAdminEditModel { get; set; } = new EntityNamePlaceholderAdminEditModel();

    @* ListDeclarationCodePlaceholder *@
    @* List<ToDoList>? toDoListList { get; set; } *@

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        await base.OnInitializedAsync();

        @* OnInitializedCodePlaceholder *@
        @* var toDoListListResult = await ToDoListAdminService.GetAllAsync(userName);
        if (toDoListListResult != null)
        {
            toDoListList = toDoListListResult;
        } *@
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var databaseEntityNamePlaceholderAdminDto = await EntityNamePlaceholderAdminService.GetByIdAsync(userName, Id);

        if (databaseEntityNamePlaceholderAdminDto == null)
        {
            toDoListAdminEditModel = new EntityNamePlaceholderAdminEditModel();
        }
        else
        {
            toDoListAdminEditModel = EntityNamePlaceholderAdminEditModel.FromEntityNamePlaceholderAdminDto(databaseEntityNamePlaceholderAdminDto);
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        @* if (string.IsNullOrWhiteSpace(toDoListAdminEditModel.Name))
        {
            return;
        } *@

        var toDoListAdminDto = EntityNamePlaceholderAdminEditModel.ToEntityNamePlaceholderAdminDto(toDoListAdminEditModel);
        toDoListAdminDto.ApplicationUserName = userName;

        if (Id.Equals(Guid.Empty))
        {
            var newEntityNamePlaceholderAdminDto = await EntityNamePlaceholderAdminService.AddAsync(toDoListAdminDto);

            if (newEntityNamePlaceholderAdminDto == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-edit/{newEntityNamePlaceholderAdminDto.Id}");
        }
        else
        {
            await EntityNamePlaceholderAdminService.EditAsync(toDoListAdminDto);
        }
    }

    async Task Remove()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        await EntityNamePlaceholderAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/UrlNamePlaceholder-list");
    }


    @* OnChangeCodePlaceholder *@
    @* void ToDoListOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        toDoListAdminEditModel.ToDoList = toDoListList?.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    } *@
}
