@page "/admin/application-user-edit"
@page "/admin/application-user-edit/{id:guid}"
@rendermode InteractiveAuto
@inject IApplicationRoleAdminService ApplicationRoleAdminService
@inject IApplicationUserAdminService ApplicationUserAdminService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>Create Application User</h1>
    }
    else
    {
        <h1>Edit Application User</h1>
    }
    <article>
        <EditForm class="container" Model="applicationUserAdminEditModel" OnSubmit="HandleSubmit">
            <div class="row">
                <div class="col">
                    @if (applicationUserAdminEditModel.ApplicationRoles == null)
                    {
                        <span>Loading...</span>
                    }
                    else
                    {
                        if (applicationUserAdminEditModel.ApplicationRoles.Count == 0)
                        {
                            <span>User has no application roles.</span>
                        }

                        <ul>
                            @for (var i = 0; i < applicationUserAdminEditModel.ApplicationRoles.Count; i += 1)
                            {
                                var index = i;

                                <li class="row">
                                    <div class="col">
                                        Application Role:
                                        @if (applicationRoleList != null)
                                        {
                                            <select @onchange="@((ChangeEventArgs changeEventArgs) => ApplicationRoleChange(changeEventArgs, index))">
                                                <option></option>
                                                @foreach (var applicationRole in applicationRoleList)
                                                    if (applicationRole.Name == @applicationUserAdminEditModel.ApplicationRoles[i]?.Name)
                                                    {
                                                        <option selected value="@applicationRole.Id">@applicationRole.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@applicationRole.Id">@applicationRole.Name</option>
                                                    }
                                                }
                                            </select>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>

                        <button @onclick="ApplicationRoleAdd" class="btn btn-secondary" type="button">Add Application Role</button>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Email:
                        <InputText @bind-Value="applicationUserAdminEditModel.Email">@applicationUserAdminEditModel.Email</InputText>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Phone Number:
                        <InputText @bind-Value="applicationUserAdminEditModel.PhoneNumber">@applicationUserAdminEditModel.PhoneNumber</InputText>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        UserName:
                        <InputText @bind-Value="applicationUserAdminEditModel.UserName">@applicationUserAdminEditModel.UserName</InputText>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/application-user-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    ApplicationUserAdminEditModel applicationUserAdminEditModel { get; set; } = new ApplicationUserAdminEditModel();
    List<ApplicationRole> applicationRoleList { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        var applicationRoleListResult = await ApplicationRoleAdminService.GetAllAsync(userName);

        if (applicationRoleListResult != null)
        {
            applicationRoleList = applicationRoleListResult;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var databaseApplicationUserAdminDto = await ApplicationUserAdminService.GetByIdAsync(userName, Id);

        if (databaseApplicationUserAdminDto == null)
        {
            applicationUserAdminEditModel = new ApplicationUserAdminEditModel();
        }
        else
        {
            applicationUserAdminEditModel = ApplicationUserAdminEditModel.FromApplicationUserAdminDto(databaseApplicationUserAdminDto);
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(applicationUserAdminEditModel.Email))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(applicationUserAdminEditModel.UserName))
        {
            return;
        }

        var applicationUserAdminDto = ApplicationUserAdminEditModel.ToApplicationUserAdminDto(applicationUserAdminEditModel);
        applicationUserAdminDto.ApplicationUserName = userName;

        if (Id.Equals(Guid.Empty))
        {
            var databaseApplicationUserAdminDto = await ApplicationUserAdminService.AddAsync(applicationUserAdminDto);

            if (databaseApplicationUserAdminDto == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/application-user-edit/{databaseApplicationUserAdminDto.Id}");
        }
        else
        {
            await ApplicationUserAdminService.EditAsync(applicationUserAdminDto);
        }
    }

    async Task Delete()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        await ApplicationUserAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/application-user-list");
    }

    void ApplicationRoleAdd()
    {
        applicationUserAdminEditModel.ApplicationRoles.Add(new ApplicationRole());
    }

    void ApplicationRoleChange(ChangeEventArgs changeEventArgs, int i)
    {
        Console.WriteLine("Application Role Change");

        if (changeEventArgs == null)
        {
            applicationUserAdminEditModel.ApplicationRoles[i] = new ApplicationRole();
            return;
        }

        Console.WriteLine(changeEventArgs);

        if (changeEventArgs.Value == null)
        {
            applicationUserAdminEditModel.ApplicationRoles[i] = new ApplicationRole();
            return;
        }

        Console.WriteLine(changeEventArgs.Value);

        var applicationRole = applicationRoleList?.Where(x => x.Id.ToString().Equals(changeEventArgs.Value)).FirstOrDefault();

        if (applicationRole == null)
        {
            applicationUserAdminEditModel.ApplicationRoles[i] = new ApplicationRole();
            return;
        }

        Console.WriteLine(applicationRole.Id);
        Console.WriteLine(applicationRole.Name);

        if (applicationRoleList != null)
        {
            foreach (var applicationRoleListItem in applicationRoleList)
            {
                if (applicationRoleListItem.Id.Equals(applicationRole.Id))
                {
                    applicationUserAdminEditModel.ApplicationRoles[i] = applicationRole;
                    return;
                }
                applicationUserAdminEditModel.ApplicationRoles[i] = new ApplicationRole();
            }
        }
    }
}
