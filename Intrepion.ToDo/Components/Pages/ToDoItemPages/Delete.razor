@page "/todoitems/delete"
@using Microsoft.EntityFrameworkCore
@using Intrepion.ToDo.BusinessLogic.Entities
@inject IDbContextFactory<Intrepion.ToDo.BusinessLogic.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ToDoItem</h2>
    <hr />
    @if (todoitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">IsCompleted</dt>
            <dd class="col-sm-10">@todoitem.IsCompleted</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Ordering</dt>
            <dd class="col-sm-10">@todoitem.Ordering</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@todoitem.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">NormalizedTitle</dt>
            <dd class="col-sm-10">@todoitem.NormalizedTitle</dd>
        </dl>
        <EditForm method="post" Model="todoitem" OnValidSubmit="DeleteToDoItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(todoitem is null)">Delete</button> |
            <a href="/todoitems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ToDoItem? todoitem;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        todoitem = await context.ToDoItems.FirstOrDefaultAsync(m => m.Id == Id);

        if (todoitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteToDoItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.ToDoItems.Remove(todoitem!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/todoitems");
    }
}
