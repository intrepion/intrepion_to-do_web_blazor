@page "/admin/UrlNamePlaceholder-list"
@rendermode InteractiveServer
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IToDoItemAdminRepository ToDoItemAdminRepository
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]

<PageTitle>HumanNamePlaceholder List</PageTitle>

<section>
  <h1>HumanNamePlaceholder List</h1>
  <article>
    <table class="table table-striped table-sm">
      <thead>
        <tr>
          <th scope="col">Id</th>

          @* ListHeaderCodePlaceholder *@

          <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody>
        @if (TableLowercaseNamePlaceholderAdminDto == null)
        {
          <tr>
            @* LoadingCountCodePlaceholder *@
          </tr>
        }
        else if (TableLowercaseNamePlaceholderAdminDto.Count == 0)
        {
          <tr>
            @* ZeroCountCodePlaceholder *@
          </tr>
        }
        else
        {
          @foreach (var toDoItemAdminDto in TableLowercaseNamePlaceholderAdminDto)
          {
            <tr>
              <td>@toDoItemAdminDto.Id</td>

              @* ListItemCodePlaceholder *@

              <td>
                <a href="@("/admin/UrlNamePlaceholder-edit/" + toDoItemAdminDto?.Id)">Edit</a>
              </td>
            </tr>
          }
        }
      </tbody>
    </table>
    <a href="/admin/UrlNamePlaceholder-edit">Create</a>
  </article>
</section>

@code {
  List<ToDoItemAdminDto>? TableLowercaseNamePlaceholderAdminDto = null;

  protected override async Task OnInitializedAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    TableLowercaseNamePlaceholderAdminDto = await ToDoItemAdminRepository.GetAllAsync(userName);
  }
}
