@page "/applicationroles/delete"
@using Microsoft.EntityFrameworkCore
@using Intrepion.ToDo.BusinessLogic.Entities
@inject IDbContextFactory<Intrepion.ToDo.BusinessLogic.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ApplicationRole</h2>
    <hr />
    @if (applicationrole is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@applicationrole.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">NormalizedName</dt>
            <dd class="col-sm-10">@applicationrole.NormalizedName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ConcurrencyStamp</dt>
            <dd class="col-sm-10">@applicationrole.ConcurrencyStamp</dd>
        </dl>
        <EditForm method="post" Model="applicationrole" OnValidSubmit="DeleteApplicationRole" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(applicationrole is null)">Delete</button> |
            <a href="/applicationroles">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ApplicationRole? applicationrole;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        applicationrole = await context.Roles.FirstOrDefaultAsync(m => m.Id == Id);

        if (applicationrole is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteApplicationRole()
    {
        using var context = DbFactory.CreateDbContext();
        context.Roles.Remove(applicationrole!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/applicationroles");
    }
}
