<h1>@Mode ApplicationUser</h1>

<hr />
@if (ApplicationUser is not null)
{
    <EditForm Model="ApplicationUser"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h2>Name</h2>
        <p>
            <label>
                Email:
                <InputText @bind-Value="ApplicationUser.Email" />
                <ConcurrencyField Model="ApplicationUser"
                                  DbModel="DbApplicationUser"
                                  Property="obj => obj?.Email" />
            </label>
        </p>
        <h2>Phone Number</h2>
        <p>
            <label>
                Phone Number:
                <InputText @bind-Value="ApplicationUser.PhoneNumber" />
                <ConcurrencyField Model="ApplicationUser"
                                  DbModel="DbApplicationUser"
                                  Property="obj => obj?.PhoneNumber" />
            </label>
        </p>
        <h2>User Name</h2>
        <p>
            <label>
                User Name:
                <InputText @bind-Value="ApplicationUser.UserName" />
                <ConcurrencyField Model="ApplicationUser"
                                  DbModel="DbApplicationUser"
                                  Property="obj => obj?.UserName" />
            </label>
        </p>
        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The ApplicationUser to upsert.
    [Parameter]
    public ApplicationUser? ApplicationUser { get; set; }

    // The database version of ApplicationUser if a concurrency issue.
    [Parameter]
    public ApplicationUser? DbApplicationUser { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    // Handle form submission request.
    // isValid: True when field validation passed.
    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);
}
