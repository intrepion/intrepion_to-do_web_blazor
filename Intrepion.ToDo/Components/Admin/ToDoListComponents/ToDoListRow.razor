@inject IToDoListFilters Filters

@if (CurrentToDoList is not null)
{
    <div class="row ToDoList-detail">
        <div class="col-2 text-right">
            <a title="Edit" href="admin/to-do-list/edit/@CurrentToDoList.Id" style="text-decoration:none">
                &nbsp;üìù&nbsp;
            </a>
            @if (CanDelete)
            {
                <span @onclick="DeleteRequestAsync"
                      title="Delete" class="clickable red">‚ùå</span>
            }
            else
            {
                <span>&nbsp;</span>
            }
            &nbsp;
        </div>

        <div class="col-3">
            <a href="@ViewLink" alt="View Details"
               title="View Details">
                @CurrentToDoList.Id
            </a>
        </div>

        @if (!DeleteConfirmation)
        {
            <div class="col-3">@CurrentToDoList?.DueDateTime</div>
            @* RowColumnCodePlaceholder *@
        }
        else
        {
            <div class="col-9">
                <DeletePrompt Confirmation="ConfirmAsync" />
            </div>
        }
    </div>
}

@code {
    private ToDoList _currentToDoList = new ToDoList();

    [Parameter]
    public ToDoList CurrentToDoList
    {
        get => _currentToDoList;
        set
        {
            if (value is not null && !value.Equals(_currentToDoList))
            {
                _currentToDoList = value;
                DeleteConfirmation = false;
            }
        }
    }

    [Parameter]
    public EventCallback DeleteToDoList { get; set; }

    [CascadingParameter]
    public GridWrapper? Wrapper { get; set; }

    private bool CanDelete =>
        !DeleteConfirmation && (Wrapper?.DeleteRequestId.Equals(Guid.Empty) == true || Wrapper?.DeleteRequestId.Equals(CurrentToDoList?.Id) == true);

    private string ViewLink => $"admin/to-do-list/view/{CurrentToDoList?.Id}";

    private bool DeleteConfirmation { get; set; }

    private async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteAsync();
        }
        else
        {
            DeleteConfirmation = false;

            if (Wrapper is not null)
            {
                await Wrapper.DeleteRequested.InvokeAsync(Guid.Empty);
            }
        }
    }

    private async Task DeleteRequestAsync()
    {
        if (Wrapper?.DeleteRequestId.Equals(Guid.Empty) == true)
        {
            DeleteConfirmation = true;
            await Wrapper.DeleteRequested.InvokeAsync(CurrentToDoList.Id);
        }
    }

    private Task DeleteAsync() => DeleteToDoList.InvokeAsync(this);
}
