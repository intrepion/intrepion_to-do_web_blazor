@page "/admin/to-do-list/view/{ToDoListId:guid}"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IPageHelper PageHelper
@inject EditSuccess EditSuccessState

<PageTitle>To Do List View</PageTitle>

@if (NotFound && !Loading)
{
    <div class="alert alert-warning">To Do List with that id doesn't exist.</div>
}
else
{
    @if (ToDoList is null || Loading)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        <h1>@ToDoList.Id</h1>
        @* PageHeaderCodePlaceholder *@

        <br />
        @if (EditSuccess)
        {
            <div class="alert alert-success">Successfully updated the To Do List.</div>
        }
        <hr />
        <h2>Id</h2>
        <br />
        <h3>@ToDoList.Id</h3>
        <br />

        <h2>Title</h2>
        <br />
        <h3>@ToDoList.Title</h3>
        <br />
        @* PropertyCodePlaceholder *@

        <a class="btn btn-primary" title="Go Back" href="admin/to-do-list/@PageHelper.Page">
            Back to Grid
        </a>
        <span>&nbsp;</span>
        @if (!Deleted)
        {
            <a class="btn btn-primary" href="admin/to-do-list/edit/@ToDoList.Id" title="Edit">Edit</a>

            <span>&nbsp;</span>
            @if (!ShowConfirmation)
            {
                <button class="btn btn-danger" @onclick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Delete</button>
            }
            else
            {
                <br />
                <br />
                <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
            }
        }
        else
        {
            <div class="btn btn-danger">ðŸš« This To Do List has been deleted.</div>
        }
    }
}

@code {
    private bool Loading;

    [Parameter]
    public Guid ToDoListId { get; set; }

    private Guid _lastToDoListId;

    [Parameter]
    public bool EditSuccess { get; set; }

    private ToDoList? ToDoList { get; set; }

    private bool NotFound = false;

    private bool ShowConfirmation = false;

    private bool Deleted = false;

    protected override async Task OnParametersSetAsync()
    {
        if (_lastToDoListId != ToDoListId)
        {
            EditSuccess = EditSuccessState.Success;
            EditSuccessState.Success = false;
            _lastToDoListId = ToDoListId;
            await LoadToDoListAsync();
        }
    }

    private async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
        else
        {
            ShowConfirmation = false;
            EditSuccess = false;
        }
    }

    private async Task LoadToDoListAsync()
    {
        if (Loading)
        {
            return;
        }

        NotFound = false;
        ToDoList = null;

        Loading = true;

        using var context = DbFactory.CreateDbContext();

        if (context.ToDoLists is not null)
        {
            ToDoList = await context.ToDoLists
                .AsNoTracking()
                .SingleOrDefaultAsync(
                    x => x.Id == ToDoListId);

            if (ToDoList is null)
            {
                NotFound = true;
            }
        }

        Loading = false;
    }

    private async Task DeleteAsync()
    {
        if (Loading)
        {
            return;
        }

        Loading = true;
        using var context = DbFactory?.CreateDbContext();

        if (context?.Roles is not null)
        {
            var toDoList = await context.ToDoLists
                .SingleOrDefaultAsync(x => x.Id == ToDoListId);

            if (toDoList is not null)
            {
                context.ToDoLists?.Remove(toDoList);
                await context.SaveChangesAsync();
                Loading = false;
                Deleted = true;
            }
            else
            {
                Loading = false;
                await LoadToDoListAsync();
            }
        }
        else
        {
            Loading = false;
            await LoadToDoListAsync();
        }
    }
}
