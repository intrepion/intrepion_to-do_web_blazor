<h1>@Mode ToDoList</h1>

<hr />
@if (ToDoList is not null)
{
    <EditForm Model="ToDoList" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Due Date Time</h2>
        <p>
            <label>
                Due Date Time:
                <InputDate @bind-Value="ToDoList.DueDateTime" @oninput="HandleDueDateTimeChange"/>
            </label>
        </p>
        <h2>Title</h2>
        <p>
            <label>
                Title:
                <InputText @bind-Value="ToDoList.Title" @oninput="HandleTitleChange"/>
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public ToDoList? ToDoList { get; set; }

    [Parameter]
    public ToDoList? DbToDoList { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleDueDateTimeChange(ChangeEventArgs changeEventArgs)
    {
        // NormalizedCodeDueDateTimePlaceholder
    }

    private void HandleTitleChange(ChangeEventArgs changeEventArgs)
    {
        // NormalizedCodeTitlePlaceholder
    }

    // HandleChangeCodePlaceholder
}
