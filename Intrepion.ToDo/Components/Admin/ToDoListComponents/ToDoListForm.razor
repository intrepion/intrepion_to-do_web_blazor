<h1>@Mode ToDoList</h1>

<hr />
@if (ToDoList is not null)
{
    <EditForm Model="ToDoList" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Title</h2>
        <p>
            <label>
                Title:
                <InputText @bind-Value="ToDoList.Title" @oninput="HandleTitleChange"/>
                <ConcurrencyField Model="ToDoList" DbModel="DbToDoList" Property="obj => obj?.Title" />
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The ToDoList to upsert.
    [Parameter]
    public ToDoList? ToDoList { get; set; }

    // The database version of ToDoList if a concurrency issue.
    [Parameter]
    public ToDoList? DbToDoList { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    // Handle form submission request.
    // isValid: True when field validation passed.
    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleTitleChange(ChangeEventArgs changeEventArgs)
    {
        if (ToDoList == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        ToDoList.NormalizedTitle = ((string)changeEventArgs.Value).ToUpperInvariant();

        // NormalizedCodeTitlePlaceholder
    }

    // HandleChangeCodePlaceholder
}
